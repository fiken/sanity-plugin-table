{"version":3,"sources":["../../src/components/TableInput.tsx"],"names":["TableInput","props","renderRowCell","rowIndex","cell","cellIndex","e","updateCell","renderRow","row","renderCell","cells","map","textAlign","RemoveIcon","removeRow","styles","table","rows","_","i","removeColumn"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,UAMJ,GAAIC,KAAD,IAAW;AAAA;;AAEd,MAAMC,aAAa,GAAIC,QAAD,IAAc,CAACC,IAAD,EAAOC,SAAP,KAAqB;AACvD,wBACE;AAAI,MAAA,GAAG,iBAAUF,QAAV,cAAsBE,SAAtB;AAAP,oBACE,6BAAC,aAAD;AACE,MAAA,QAAQ,EAAE,CADZ;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,KAAK,EAAED,IAHT;AAIE,MAAA,QAAQ,EAAGE,CAAD,IAAOL,KAAK,CAACM,UAAN,CAAiBD,CAAjB,EAAoBH,QAApB,EAA8BE,SAA9B;AAJnB,MADF,CADF;AAUD,GAXD;;AAaA,MAAMG,SAAS,GAAG,CAACC,GAAD,EAAMN,QAAN,KAAmB;AACnC,QAAMO,UAAU,GAAGR,aAAa,CAACC,QAAD,CAAhC;AACA,wBACE;AAAI,MAAA,GAAG,gBAASA,QAAT;AAAP,OACGM,GAAG,CAACE,KAAJ,CAAUC,GAAV,CAAcF,UAAd,CADH,eAGI;AAAI,MAAA,GAAG,EAAEP;AAAT,oBACE,6BAAC,OAAD;AAAK,MAAA,UAAU,EAAE,CAAjB;AAAoB,MAAA,KAAK,EAAE;AAAEU,QAAAA,SAAS,EAAE;AAAb;AAA3B,oBACA,6BAAC,UAAD;AACE,MAAA,IAAI,EAAEC,iBADR;AAEE,MAAA,OAAO,EAAE,CAFX;AAGE,MAAA,OAAO,EAAE,MAAMb,KAAK,CAACc,SAAN,CAAgBZ,QAAhB,CAHjB;AAIE,MAAA,IAAI,EAAC;AAJP,MADA,CADF,CAHJ,CADF;AAiBD,GAnBD;;AAqBA,sBACE;AAAO,IAAA,SAAS,EAAEa,eAAOC;AAAzB,kBACE,4CACGhB,KAAK,CAACiB,IAAN,CAAWN,GAAX,CAAeJ,SAAf,CADH,eAEE,yCAAK,CAAC,iBAAAP,KAAK,CAACiB,IAAN,CAAW,CAAX,+DAAeP,KAAf,KAAuB,EAAxB,EAA4BC,GAA5B,CAAgC,CAACO,CAAD,EAAIC,CAAJ,kBACnC;AAAI,IAAA,GAAG,EAAEA;AAAT,kBACE,6BAAC,OAAD;AAAK,IAAA,SAAS,EAAE,CAAhB;AAAmB,IAAA,KAAK,EAAE;AAAEP,MAAAA,SAAS,EAAE;AAAb;AAA1B,kBACA,6BAAC,UAAD;AACE,IAAA,IAAI,EAAEC,iBADR;AAEE,IAAA,OAAO,EAAE,CAFX;AAGE,IAAA,OAAO,EAAE,MAAMb,KAAK,CAACoB,YAAN,CAAmBD,CAAnB,CAHjB;AAIE,IAAA,IAAI,EAAC;AAJP,IADA,CADF,CADG,CAAL,CAFF,CADF,CADF;AAmBD,CA7DD;;eA+DepB,U","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Box, Button, TextInput } from '@sanity/ui';\nimport { RemoveIcon } from '@sanity/icons';\nimport styles from './table.css';\n\nconst TableInput: FunctionComponent<{\n  rows: TableRow[];\n  updateCell: (e: React.FormEvent<HTMLInputElement>\n  , rowIndex: number, cellIndex: number) => any;\n  removeRow: (index: number) => any;\n  removeColumn: (index: number) => any;\n}> = (props) => {\n\n  const renderRowCell = (rowIndex) => (cell, cellIndex) => {\n    return (\n      <td key={`cell-${rowIndex}-${cellIndex}`}>\n        <TextInput\n          fontSize={1}\n          padding={3}\n          value={cell}\n          onChange={(e) => props.updateCell(e, rowIndex, cellIndex)}\n        />\n      </td>\n    );\n  };\n\n  const renderRow = (row, rowIndex) => {\n    const renderCell = renderRowCell(rowIndex);\n    return (\n      <tr key={`row-${rowIndex}`}>\n        {row.cells.map(renderCell)}\n        {\n          <td key={rowIndex}>\n            <Box marginLeft={1} style={{ textAlign: 'center'}}>\n            <Button\n              icon={RemoveIcon}\n              padding={2}\n              onClick={() => props.removeRow(rowIndex)}\n              mode=\"bleed\"\n            />\n            </Box>\n          </td>\n        }\n      </tr>\n    );\n  };\n\n  return (\n    <table className={styles.table}>\n      <tbody>\n        {props.rows.map(renderRow)}\n        <tr>{(props.rows[0]?.cells|| []).map((_, i) => (\n          <td key={i}>\n            <Box marginTop={1} style={{ textAlign: 'center'}}>\n            <Button\n              icon={RemoveIcon}\n              padding={2}\n              onClick={() => props.removeColumn(i)}\n              mode=\"bleed\"\n            />\n            </Box>\n          </td>\n        ))}</tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default TableInput;\n"],"file":"TableInput.js"}