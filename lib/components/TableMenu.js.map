{"version":3,"sources":["../../src/components/TableMenu.tsx"],"names":["TableMenu","props","dialog","setDialog","count","setCount","updateCount","e","currentTarget","value","addRows","type","callback","addRowAt","index","addColumns","addColumnsAt","addColumnAt","onConfirm","parsedCount","parseInt","undefined","textAlign","ControlsIcon","AddIcon","WarningOutlineIcon","remove","placement"],"mappings":"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","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  Dialog,\n  Inline,\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  TextInput,\n} from '@sanity/ui';\nimport { AddIcon, WarningOutlineIcon, ControlsIcon } from '@sanity/icons';\n\nconst TableMenu: FunctionComponent<{\n  addColumns: (count: number) => any;\n  addColumnAt: (index: number) => any;\n  addRows: (count: number) => any;\n  addRowAt: (index: number) => any;\n  remove: () => any;\n  placement: 'top' | 'bottom' | 'left' | 'right' | 'auto';\n}> = (props) => {\n  const [dialog, setDialog] = useState<{\n    type: string;\n    callback: (count: number) => any;\n  } | null>(null);\n\n  const [count, setCount] = useState('');\n\n  const updateCount = (e) => {\n    setCount(e.currentTarget.value);\n  }\n\n  const addRows = () => {\n    setDialog({ type: 'rows', callback: (count) => props.addRows(count) });\n  };\n\n  const addRowAt = () => {\n    setDialog({ type: 'rows', callback: (index) => props.addRowAt(index) });\n  };\n\n  const addColumns = () => {\n    setDialog({\n      type: 'columns',\n      callback: (count) => props.addColumns(count),\n    });\n  };\n\n  const addColumnsAt = () => {\n    setDialog({ type: 'columns', callback: (index) => props.addColumnAt(index) });\n  };\n\n  const onConfirm = () => {\n    const parsedCount = parseInt(count, 10);\n\n    if (parsedCount < 100) {\n      setDialog(null);\n      dialog.callback(parsedCount);\n      setCount(undefined);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {dialog && (\n        <Dialog\n          header={`Add ${dialog.type}`}\n          id=\"dialog-add\"\n          onClose={() => setDialog(null)}\n          zOffset={1000}\n        >\n          <Card padding={4}>\n            <TextInput\n              style={{ textAlign: 'left' }}\n              fontSize={2}\n              padding={3}\n              type=\"number\"\n              value={count}\n              onChange={updateCount}\n            />\n            <Box marginTop={4}>\n              <Inline space={1} style={{ textAlign: 'right' }}>\n                <Button\n                  text=\"Cancel\"\n                  mode=\"ghost\"\n                  onClick={() => setDialog(null)}\n                />\n                <Button text=\"Confirm\" tone=\"critical\" onClick={onConfirm} />\n              </Inline>\n            </Box>\n          </Card>\n        </Dialog>\n      )}\n      <MenuButton\n        button={\n          <Button icon={ControlsIcon} fontSize={1} padding={2} mode=\"ghost\" />\n        }\n        id=\"menu-button-example\"\n        menu={\n          <Menu>\n            <MenuItem\n              icon={AddIcon}\n              fontSize={1}\n              text=\"Add Row(s)\"\n              onClick={addRows}\n            />\n            <MenuItem\n              icon={AddIcon}\n              fontSize={1}\n              text=\"Add Row At Index\"\n              onClick={addRowAt}\n            />\n            <MenuItem\n              icon={AddIcon}\n              fontSize={1}\n              text=\"Add Column(s)\"\n              onClick={addColumns}\n            />\n            <MenuItem\n              icon={AddIcon}\n              fontSize={1}\n              text=\"Add Column At Index\"\n              onClick={addColumnsAt}\n            />\n            <MenuDivider />\n            <MenuItem\n              icon={WarningOutlineIcon}\n              fontSize={1}\n              text=\"Remove\"\n              tone=\"critical\"\n              onClick={props.remove}\n            />\n          </Menu>\n        }\n        placement={props.placement}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default TableMenu;\n"],"file":"TableMenu.js"}